from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from services.processor import BenchmarkProcessor


async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üõ† –ü–∞—Ä—Å–µ—Ä—ã"), KeyboardButton(text="üìÑ –§–æ—Ä–º–∞—Ç—ã")],
        ],
        resize_keyboard=True,
    )

    await message.answer(
        "üéÆ Multi-Format Benchmark Processor\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ CapFrameX benchmark\n"
        "‚Ä¢ MSI Afterburner\n"
        "‚Ä¢ Custom format\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ benchmark —Ñ–∞–π–ª!\n\n"
        "–î–ª—è CapFrame —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç.",
        reply_markup=keyboard,
    )


async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ benchmark —Ñ–∞–π–ª\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n"
        "   ‚Ä¢ XLSX\n"
        "   ‚Ä¢ CSV\n\n"
        "üìä –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –î–ª—è CapFrameX —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ –í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã benchmark!"
    )


async def cmd_about(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    await message.answer(
        "üéÆ Multi-Format Benchmark Processor\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ CapFrameX benchmark\n"
        "‚Ä¢ MSI Afterburner\n"
        "‚Ä¢ Custom format\n\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö CapFrameX —Ñ–∞–π–ª–æ–≤\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö, –±–µ–∑ –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ XLSX –∏ CSV\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ benchmark —Ñ–∞–π–ª!"
    )


async def cmd_parsers_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–∞—Ä—Å–µ—Ä—ã'"""
    processor = BenchmarkProcessor()
    parsers = processor.get_available_parsers()

    response = "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:\n\n"
    for name, description in parsers.items():
        response += f"‚Ä¢ {name}: {description}\n"

    response += "\nüìÅ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞!\n"
    response += "–î–ª—è CapFrameX —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤."
    await message.answer(response)


async def cmd_formats_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§–æ—Ä–º–∞—Ç—ã'"""
    await message.answer(
        "üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:\n\n"
        "<b>CapFrameX</b>\n"
        "–§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–µ–π–º—Ä–µ–π—Ç–æ–≤ –æ—Ç CapFrameX\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n"
        "<b>MSI Afterburner</b>\n"
        "–§–∞–π–ª benchmark –æ—Ç MSI Afterburner + RivaTuner Statistics Server\n\n"
        "<b>Custom Format</b>\n"
        "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (CSV, TSV, JSON)"
    )


def register_start_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–∞"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_about, lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
    dp.message.register(cmd_help, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    dp.message.register(cmd_parsers_info, lambda message: message.text == "üõ† –ü–∞—Ä—Å–µ—Ä—ã")
    dp.message.register(cmd_formats_info, lambda message: message.text == "üìÑ –§–æ—Ä–º–∞—Ç—ã")
