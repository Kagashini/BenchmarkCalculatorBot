from aiogram import Dispatcher, F, Bot
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.processor import BenchmarkProcessor
from utils.file_utils import save_uploaded_file, cleanup_temp_files
from parsers import detect_parser_type
import asyncio
import os

processor = BenchmarkProcessor()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ CapFrame
class CapFrameProcessingStates(StatesGroup):
    collecting_files = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î –∏–ª–∏ Redis)
capframe_sessions = {}


async def handle_benchmark_file(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ benchmark —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ CapFrame"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 50 –ú–ë –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if message.document.file_size > 50 * 1024 * 1024:
            await message.answer(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await bot.get_file(message.document.file_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
        if os.path.isabs(file_info.file_path):
            # –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ file_path —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = file_info.file_path
        else:
            # –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path = await save_uploaded_file(message.document, bot)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—Å–µ—Ä–∞
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()
        parser_type = detect_parser_type(content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª CapFrame
        if parser_type == "capframe":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            session = capframe_sessions.get(user_id, [])
            session.append(file_path)
            capframe_sessions[user_id] = session

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            if len(session) == 1:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(
                    process_capframe_session(user_id, message, state, bot)
                )
                await message.answer(
                    "üì• –ü–æ–ª—É—á–µ–Ω—ã CapFrameX —Ñ–∞–π–ª—ã. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ CapFrame —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        result = await processor.process_file(file_path, parser_type)

        if not result["success"]:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({result['parser_type']}): {result['error']}"
            )
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if not os.path.isabs(file_path):
                cleanup_temp_files(file_path)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ({result['parser_type']})\n"
            f"üìä –ó–∞–ø–∏—Å–µ–π: {result['raw_count']} ‚Üí {result['processed_count']}\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π FPS: {result['stats'].get('avg_framerate', 0):.1f}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
        xlsx_data = result["reports"]["xlsx_data"]
        csv_data = result["reports"]["csv_data"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if len(xlsx_data) > 50 * 1024 * 1024:  # 50 MB
            await message.answer(
                "‚ùå XLSX –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª–µ–µ 50MB)"
            )
        else:
            xlsx_file = BufferedInputFile(xlsx_data, filename=result["xlsx_filename"])
            await message.answer_document(document=xlsx_file, caption="üìä XLSX –æ—Ç—á–µ—Ç")

        if len(csv_data) > 50 * 1024 * 1024:  # 50 MB
            await message.answer(
                "‚ùå CSV –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª–µ–µ 50MB)"
            )
        else:
            csv_file = BufferedInputFile(csv_data, filename=result["csv_filename"])
            await message.answer_document(document=csv_file, caption="üìÑ CSV –æ—Ç—á–µ—Ç")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if not os.path.isabs(file_path):
            cleanup_temp_files(file_path)

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        print(f"Error: {e}")


async def process_capframe_session(
    user_id: int, message: Message, state: FSMContext, bot: Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ CapFrame —Ñ–∞–π–ª–æ–≤"""
    # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    await asyncio.sleep(10)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
    session = capframe_sessions.get(user_id, [])

    if not session:
        return

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ CapFrame —Ñ–∞–π–ª—ã –∫–∞–∫ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä
        result = await processor.process_files(session, "capframe")

        if not result["success"]:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CapFrame —Ñ–∞–π–ª–æ–≤: {result['error']}"
            )
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            for file_path in session:
                if not os.path.isabs(file_path):
                    cleanup_temp_files(file_path)
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            if user_id in capframe_sessions:
                del capframe_sessions[user_id]
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ CapFrameX —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üìä –ó–∞–ø–∏—Å–µ–π: {result['raw_count']} ‚Üí {result['processed_count']}\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π FPS: {result['stats'].get('avg_framerate', 0):.1f}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
        xlsx_data = result["reports"]["xlsx_data"]
        csv_data = result["reports"]["csv_data"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if len(xlsx_data) > 50 * 1024 * 1024:  # 50 MB
            await message.answer(
                "‚ùå XLSX –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª–µ–µ 50MB)"
            )
        else:
            xlsx_file = BufferedInputFile(xlsx_data, filename=result["xlsx_filename"])
            await message.answer_document(
                document=xlsx_file, caption="üìä XLSX –æ—Ç—á–µ—Ç (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π)"
            )

        if len(csv_data) > 50 * 1024 * 1024:  # 50 MB
            await message.answer(
                "‚ùå CSV –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª–µ–µ 50MB)"
            )
        else:
            csv_file = BufferedInputFile(csv_data, filename=result["csv_filename"])
            await message.answer_document(
                document=csv_file, caption="üìÑ CSV –æ—Ç—á–µ—Ç (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π)"
            )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        for file_path in session:
            if not os.path.isabs(file_path):
                cleanup_temp_files(file_path)

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if user_id in capframe_sessions:
            del capframe_sessions[user_id]

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CapFrame —Ñ–∞–π–ª–æ–≤")
        print(f"Error: {e}")
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if user_id in capframe_sessions:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            for file_path in capframe_sessions[user_id]:
                if not os.path.isabs(file_path):
                    cleanup_temp_files(file_path)
            del capframe_sessions[user_id]


async def cmd_parsers(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã"""
    parsers = processor.get_available_parsers()

    response = "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:\n\n"
    for name, description in parsers.items():
        response += f"‚Ä¢ {name}: {description}\n"

    response += "\nüìÅ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞!"
    await message.answer(response)


def register_file_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    dp.message.register(handle_benchmark_file, F.document)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
    dp.message.register(cmd_parsers, Command("parsers"))
